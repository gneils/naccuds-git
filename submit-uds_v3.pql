PROCEDURE      SUBMIT.UDS_V3:T  (158030,50119)  |Last amended Jun 16, 2015,13:55:19
| Creator:   Greg Neils
| Created:   4/21/2015
| Reason:    Create a SAS file for NACCUDS submissions.  Then follow website directions.
| Output:    \\192.168.53.249\Data1\NACCUDS\Database\Data Submission\DATA1.txt'
c for NACCUDS submission
 From the ADC homepage:
 http://www.alz.washington.edu/WEB/adc-home.html#
 1. DATA CORES/DATA MANAGERS
 2. UDS and FTLD Submission
 3. Columbia University
 4. enter site
 5. UPLOAD and PRE-PROCESS FILES
 6. Upload UDS Data
 7. Choose file
 8. click Upload
call DCCPROCF.SYSTEM.ALLRECS
call DCCPROCF.BASE.MSTCLEAR
program
. string  * 200       SPSS_FILE_NAME
. string  * 200       SPSS_SYNTAX_FILE_NAME
. string  * 200       DATA_SUBMISSION_FOLDER
. string  * 200       SAS_FILE_NAME
. string  * 200       SPSS_SYNTAX
. string  * 200       SAS_DATA_FILE
. string  * 200       SPSS_DATA_FILE
. string  * 400       FILE_LINE
. integer *   1       TEMP#

. DATA_SUBMISSION_FOLDER = '<GDATA1>NACCUDS\Database\Data Submission\'
. SPSS_FILE_NAME = datec(today(0),'YYYY_MM_DD') + '_UDS.sav'
. SPSS_SYNTAX_FILE_NAME = 'NACCUDS-SPSS-to-SASS.SPS'
. SAS_FILE_NAME = 'cu.sas7bdat'
. ifnotthen (fileis(DATA_SUBMISSION_FOLDER) = -1)
.   display infobox ' DATA_SUBMISSION_FOLDER  WAS NOT FOUND!'
. else
.   ifthen (fileis ('DATA_SUBMISSION_FOLDER' + SAS_FILE_NAME ) )
.     TEMP# = DELFILE ( 'DATA_SUBMISSION_FOLDER' + SAS_FILE_NAME )
.     IFTHEN (TEMP# EQ 0) WRITE 'LAST ' SAS_FILE_NAME ' WAS DELETED'
.     ELSE WRITE 'ERROR DELETING ' SAS_FILE_NAME
.     ENDIF
.   endif
. endif
. SPSS_DATA_FILE = DATA_SUBMISSION_FOLDER + SPSS_FILE_NAME
. SPSS_SYNTAX    = DATA_SUBMISSION_FOLDER + SPSS_SYNTAX_FILE_NAME
. SAS_DATA_FILE  = DATA_SUBMISSION_FOLDER + SAS_FILE_NAME
. t = globals( 'SPSS_DATA_FILE', SPSS_DATA_FILE )
. t = globals( 'SPSS_SYNTAX', SPSS_SYNTAX)

. WRITE 'Creating SPSS to SAS Syntax file: ' SPSS_SYNTAX

. WRITE 'Exporting files to: ' SPSS_DATA_FILE
. open  (SPSS_SYNTAX) write dsnvar= SPSS_SYNTAX iostat= FILE_IOSTAT lrecl=300
. ifthen (FILE_IOSTAT eq 0)
.   write (SPSS_SYNTAX) '* Automatically generate by SIR NACCUDS when the SPSS files are created' /
                        '* SPSS to SAS Syntax' /
                        '* Created as a way to embed the date in the file name' /

.   write (SPSS_SYNTAX) ["GET FILE='" + SPSS_DATA_FILE + "'."]
.   write (SPSS_SYNTAX) 'ALTER TYPE PTID (A10).'
.   FILE_LINE = "save translate outfile='" + DATA_SUBMISSION_FOLDER + SAS_FILE_NAME + "'" | \\Dccmaincsfs\Data1\NACCUDS\Database\Data Submission\cu.sas7bdat'
.   write (SPSS_SYNTAX) FILE_LINE
.   write (SPSS_SYNTAX) '  /PLATFORM=UNIX ' /
                    '  /TYPE= SAS' /
                    '  /VERSION=9' /
                    '  /REPLACE.' /
                    'EXECUTE. '

.   close (SPSS_SYNTAX)
.   else
.     display infobox 'OPPS! Can NOT Update SPSS Syntax.  Please open at ' + char(13)
                      + SPSS_SYNTAX + char(13)
                      + 'And check the date' + char(13)
                      + 'or you might be submitting old data without knowing it!'
. endif
END PROGRAM

retrieval CRWARN misschar = / progress
. integer *    1        YES NO
. integer *    1  array FTLD# (30000)
. integer *    1        FORMVER
. integer *    1        ADCID    |AD CENTER ID
. string  *    3        FORMID   | Form ID
. integer *    1        VISITMO
. integer *    1        VISITDAY
. integer *    2        VISITYR
. string  *    3        VISITNUM
. string  *    2        PACKET           |NECESSARY EVIL.  UDS USES "FF" FOR FLTD FOLLOW UP.
. integer *    2        SUBMITTED_PACKETS
. string  *  512        CMD
. SET ADCID (4)
. set NO (0) YES (1)
. SET SUBMITTED_PACKETS (0)
DEFINE PROCEDURE VARIABLES
  EXCLUDE DCCDATE DSTAMP DWHO DCCWHO DCCEDITS DCCTIME
          YES NO
          INTERVAL
          SUBMITTED_PACKETS CMD
. PROCESS CASES
.   autoset
|Always process the Z1CHECK form first to get the VISITDATE
.   process rec Z1CHECK
.     get vars PTID INTERVAL FORMVER PACKET
.     IFNOT ( FORMVER EQ 3 ) next REC  | TESTing VERSION THREE PACKETS ONLY.
write ptid
.     DO REPEAT REC_NAME =  A1DEMOG    A2INFORM    A3FAMHIS   A3FAM_V2    A4MEDS     A4G_V2      A4DETAIL   A5HEALTH
                            B1PHYS     B2HACHIN    B3UPDRS    B4CDR       B5NPI      B6GDS       B7FAQ      B8OVER     B8NEURO    B9ONSET
                            C1NEURO    D1COG       D2MEDCON   E1IMAGE     T1TELE     Z1CHECK
                            A3AFCONS   A3FFAMHIS   B3FUPDRS   B9FPPA      C1FNEURO   C2FSOCIAL   C3FBEHAV   C4FINHIB   C5FINTER   C6FMONIT
                            E2FIMAGE   E3FIMDX     Z1FCHECK   /
                UDS_NAME =  A1         A2          A3         A3          A4         A4G         A4D        A5
                            B1         B2          B3         B4          B5         B6          B7         B8         B8         B9
                            C1         D1          D2         E1          T1         Z1
                            A3A        A3F         B3F        B9F         C1F        C2F         C3F        C4F        C5F        C6F
                            E2F        E3F         Z1F
.       WRITE 10t 'REC_NAME'
.       process rec REC_NAME via (INTERVAL)
.         autoset
.         get vars all
.         process rec Z1CHECK |         These variables were reset by the autoset.
.           get vars PTID FORMVER PACKET
.         END REC
.         FORMID = 'UDS_NAME'
.         ifthen('REC_NAME' eq 'C1NEURO')
.           ifthen (exists( varget('MOCACOMP')  ) eq 1)
.             FORMID = 'C2'
.           endif
.         endif
.         IF( EXISTS( PACKET ) EQ 0 ) WRITE 'NO PACKET INFO: ' PTID ' Interval: ' INTERVAL; next CASES
.         | FTLD PACKET CONVERSION "F" = "FF"
.         ifthen( 'REC_NAME' = 'A3AFCONS'  or  'A3FFAMHIS'  or
                               'B3FUPDRS'  or  'B9FPPA'     or
                               'C1FNEURO'  or  'C2FSOCIAL'  or
                               'C3FBEHAV'  or  'C4FINHIB'   or
                               'C5FINTER'  or  'C6FMONIT'   or
                               'E2FIMAGE'  or  'E3FIMDX'    or  'Z1FCHECK' )
.           execute subprocedure FF
.         endif
.         if( 'REC_NAME' = 'D1COG') execute subprocedure D1COG_RECODES
.         if( 'REC_NAME' = 'B8NEURO') execute subprocedure B8NEURO_RECODES
.         execute subprocedure HEADER_DATA

.         PERFORM PROCS

.         SUBMITTED_PACKETS = SUBMITTED_PACKETS + 1
.       end rec
.     END REPEAT
.   end rec
. end cases

. WRITE "The NACCUDS SAS have been made." /
        SUBMITTED_PACKETS " Packets submitted " /
        "- Run the small spss syntax to make them UDS compatible."
        "- Upload them to the NACCUDS website."




subprocedure HEADER_DATA
. VISITMO  = numbr( dateC( VISITDATE, 'MM' ) )
. VISITDAY = numbr( dateC( VISITDATE, 'DD' ) )
. VISITYR  = numbr( dateC( VISITDATE, 'YYYY' ) )
. VISITNUM = FORMAT( INTERVAL )
C . write 'Visit: '  VISITNUM  ' Visit Date: ' VISITDATE ' M: ' VISITMO  'D: 'VISITDAY  ' Y: ' VISITYR  | debug
end subprocedure

subprocedure FF
c since this is a subprocedure and not in the record type, it will change the value in the data buffer, which is what we want
. PACKET = "FF"
end subprocedure

SUBPROCEDURE D1COG_RECODES
| DEFAULTS TO 0 IF YES NOT MARKED
| Q4
. ifthen (DEMENTED eq 1) | Q3
.   if (exists(AMNDEM) eq 0)   AMNDEM = 0
.   if (exists(PCA) eq 0)      PCA = 0
.   if (exists(PPASYN) eq 0)   PPASYN = 0
.   if (exists(PPASYNT) eq 0)  PPASYNT = 0
.   if (exists(FTDSYN) eq 0)   FTDSYN = 0
.   if (exists(LBDSYN) eq 0)   LBDSYN = 0
.   if (exists(NAMNDEM) eq 0)  NAMNDEM = 0
. endif

| Q5
. ifthen( NORMCOG eq 0 ) | Q2  if yes to Q2 go to Q6.  Tricky!
.   if (exists(MCIAMEM) eq 0)   MCIAMEM = 0
.   if (exists(MCIAPLUS) eq 0)  MCIAPLUS = 0
.   if (exists(MCINON1) eq 0)   MCINON1 = 0
.   if (exists(MCINON2) eq 0)   MCINON2 = 0
.   if (exists(IMPNOMCI) eq 0)  IMPNOMCI = 0
. endif

| Q11
. if (exists(ALZDIS) eq 0)    ALZDIS = 0

| Q12
. if (exists(LBDIS) eq 0)     LBDIS = 0

| Q13
. if (exists(MSA) eq 0)       MSA= 0

| Q14
. if (exists(PSP) eq 0)       PSP= 0
. if (exists(CORT) eq 0)      CORT= 0
. if (exists(FTLDMO) eq 0)    FTLDMO= 0
. if (exists(FTLDNOS) eq 0)   FTLDNOS= 0

| Q15 - Q25
. if (exists(CVD) eq 0)       CVD= 0
. if (exists(ESSTREM) eq 0)   ESSTREM= 0
. if (exists(DOWNS) eq 0)     DOWNS= 0
. if (exists(HUNT) eq 0)      HUNT= 0
. if (exists(PRION) eq 0)     PRION= 0
. if (exists(BRNINJ) eq 0)    BRNINJ= 0
. if (exists(HYCEPH) eq 0)    HYCEPH= 0
. if (exists(EPILEP) eq 0)    EPILEP= 0
. if (exists(NEOP) eq 0)      NEOP= 0
. if (exists(HIV) eq 0)       HIV= 0
. if (exists(OTHCOG) eq 0)    OTHCOG= 0

| Q26 - Q39
. if (exists(DEP) eq 0)       DEP= 0
. if (exists(BIPOLDX) eq 0)   BIPOLDX= 0
. if (exists(SCHIZOP) eq 0)   SCHIZOP= 0
. if (exists(ANXIET) eq 0)    ANXIET= 0
. if (exists(DELIR) eq 0)     DELIR= 0
. if (exists(PTSDDX) eq 0)    PTSDDX= 0
. if (exists(OTHPSY) eq 0)    OTHPSY= 0
. if (exists(ALCDEM) eq 0)    ALCDEM= 0
. if (exists(IMPSUB) eq 0)    IMPSUB= 0
. if (exists(DYSILL) eq 0)    DYSILL= 0
. if (exists(MEDS) eq 0)      MEDS= 0
. if (exists(COGOTH) eq 0)    COGOTH= 0
. if (exists(COGOTH2) eq 0)   COGOTH2= 0
. if (exists(COGOTH3) eq 0)   COGOTH3= 0
end subprocedure

SUBPROCEDURE B8NEURO_RECODES
| DEFAULTS TO 0 IF YES NOT MARKED
| Q2
. ifthen (PARKSIGN eq 1)
.   if (exists(RESTTRL) eq 0)  RESTTRL= 0
.   if (exists(RESTTRR) eq 0)  RESTTRR= 0
.   if (exists(SLOWINGL) eq 0) SLOWINGL= 0
.   if (exists(SLOWINGR) eq 0) SLOWINGR= 0
.   if (exists(RIGIDL) eq 0)   RIGIDL= 0
.   if (exists(RIGIDR) eq 0)   RIGIDR= 0

.   if (exists(BRADY) eq 0)    BRADY= 0
.   if (exists(PARKGAIT) eq 0) PARKGAIT= 0
.   if (exists(POSTINST) eq 0) POSTINST= 0
. endif

| Q3
. ifthen (CVDSIGNS eq 1)
.   if (exists(CORTDEF) eq 0)  CORTDEF= 0
.   if (exists(SIVDFIND) eq 0) SIVDFIND= 0

.   if (exists(CVDMOTL) eq 0)  CVDMOTL= 0
.   if (exists(CVDMOTR) eq 0)  CVDMOTR= 0
.   if (exists(CORTVISL) eq 0) CORTVISL= 0
.   if (exists(CORTVISR) eq 0) CORTVISR= 0
.   if (exists(SOMATL) eq 0)   SOMATL= 0
.   if (exists(SOMATR) eq 0)   SOMATR= 0
. endif

| Q5
. ifthen (PSPCBS eq 1)
.   if (exists(EYEPSP) eq 0)  EYEPSP= 0
.   if (exists(DYSPSP) eq 0)  DYSPSP= 0
.   if (exists(AXIALPSP) eq 0)  AXIALPSP= 0
.   if (exists(GAITPSP) eq 0)  GAITPSP= 0
.   if (exists(APRAXSP) eq 0)  APRAXSP= 0

.   if (exists(APRAXL) eq 0)  APRAXL= 0
.   if (exists(APRAXR) eq 0)  APRAXR= 0
.   if (exists(CORTSENL) eq 0)  CORTSENL= 0
.   if (exists(CORTSENR) eq 0)  CORTSENR= 0
.   if (exists(ATAXL) eq 0)  ATAXL= 0
.   if (exists(ATAXR) eq 0)  ATAXR= 0
.   if (exists(ALIENLML) eq 0)  ALIENLML= 0
.   if (exists(ALIENLMR) eq 0)  ALIENLMR= 0
.   if (exists(DYSTONL) eq 0)  DYSTONL= 0
.   if (exists(DYSTONR) eq 0)  DYSTONR= 0
.   if (exists(MYOCLLT) eq 0)  MYOCLLT= 0
.   if (exists(MYOCLRT) eq 0)  MYOCLRT= 0
. endif
end subprocedure

SPSS SAVE FILE FILENAME = '<SPSS_DATA_FILE>'

end retrieval
call DCCPROCF.BASE.MSTSET


C RUN THE SPSS SYNTAX.  CREATE THE SAS FILE
PROGRAM
. string  *  512    SPSS_EXE
. string  *  512    SPSS_SYNTAX
. string  *  512    CMD

. SPSS_EXE    = '\\192.168.53.236\C$\Program Files\IBM\SPSS\Statistics\22\stats.exe'
. SPSS_SYNTAX = SGLOBAL('SPSS_SYNTAX')
. CMD =  "'" + '"' + SPSS_EXE + '"' + ' ' + '"' + SPSS_SYNTAX + '"' + "'"
C . CMD = '"C:\Program Files\IBM\SPSS\Statistics\22\stats.exe" "D:\Clients\ColU\Ming\CTI\randlist.sav" '
. WRITE cmd
. pql escape cmd
END PROGRAM



cif eq 1,2
SPSS to SAS Syntax
*CHANGE DATE IN FILE NAME TO DATE OF FILE CREATION BEFORE RUNNING.

GET FILE='\\Dccmaincsfs\Data1\NACCUDS\Database\Data Submission\2015_05_22_UDS.sav'.

ALTER TYPE PTID (A10).
save translate outfile='\\Dccmaincsfs\Data1\NACCUDS\Database\Data Submission\cu.sas7bdat'
 /PLATFORM=UNIX
 /TYPE= SAS
 /VERSION=9
 /REPLACE.
EXECUTE.
cif end
END PROCEDURE
