PROCEDURE      NAVIGATE.MAIN:T  (157932,33556)  |Last amended Mar 10, 2015,09:19:16
|| Generated by DP - don't edit anything outside |{...|}

|{ Header
|
CIF EQ '<USERA>', ''
GLOBAL USERA = 'GNEILS'
GLOBAL DEVMODE = 1
CIF END
|
program
. window clear
. string * 100 PATH$
. PATH$ = dsn( 'prefix' )
. t = upset( 'sir.fsize',  fst( upget( 'sir.fsize' ), "8" )   )
END PROGRAM
CIF EQ 0<DEVMODE>, 1
. GLOBAL GSECLEV = 1
. connect database ADRC prefix = 'C:\Users\Greg\Documents\GitHub\'
. attribute DCCPROCF filename = 'C:\Users\Greg\Documents\GitHub\dccprocf.srp'
. attribute GUIPROCF filename = 'C:\Users\Greg\Documents\GitHub\guiprocf.srp'
. attribute PREFIX   filename = 'C:\Users\Greg\Documents\GitHub\'
. attribute ADRC     filename = 'C:\Users\Greg\Documents\GitHub\ADRC.SR4'
. attribute NACCUDS  filename = 'C:\Users\Greg\Documents\GitHub\NACCUDS.SR4'
CIF FALSE
. connect database ADRC prefix = '<GDATA1>ADRC\Database\'
PROGRAM
WRITE 'THIS LINE MUST BE HERE OR THE CONNECT DATABASE ABOE DOES NOT WORK!!!!!!!'
END PROGRAM
. attribute PREFIX  filename = '<GDATA1>NACCUDS\Database\'
. attribute ADRC    filename = '<GDATA1>ADRC\Database\ADRC.SR4'
. attribute NACCUDS filename = '<GDATA1>NACCUDS\DATABASE\NACCUDS.SR4'
CIF END
|
set database NACCUDS
call DCCPROCF.SYSTEM.ALLRECS
retrieval update noautocase  crwarn
|}

integer*2 m_id, m_arg1, m_arg2

integer*1 IDSTATIC; preset IDSTATIC (-1)
integer*1 IDCLOSE ; preset IDCLOSE  ( 0)
integer*1 SUBJECT_LABEL                   ; preset SUBJECT_LABEL                    (1 )
integer*1 FIND_CASE                       ; preset FIND_CASE                        (2 )
integer*1 DOB_LABEL                       ; preset DOB_LABEL                        (3 )
integer*1 FIND_DOB                        ; preset FIND_DOB                         (4 )
integer*1 DEFAULT_BUTTON                  ; preset DEFAULT_BUTTON                   (5 )
integer*1 SUBMIT_UDS                      ; preset SUBMIT_UDS                       (6 )
integer*1 NACCUDS_SCREENS                 ; preset NACCUDS_SCREENS                  (7 )
integer*1 VISITS_LABEL                    ; preset VISITS_LABEL                     (8 )
integer*1 VISITS                          ; preset VISITS                           (9 )
integer*1 BANNER                          ; preset BANNER                           (10 )
integer*1 USERNAME                        ; preset USERNAME                         (11 )
integer*1 MASTER_LABEL                    ; preset MASTER_LABEL                     (12 )
integer*1 HIPAA1                          ; preset HIPAA1                           (13 )
integer*1 HIPAA2                          ; preset HIPAA2                           (14 )
integer*1 FORM_FEEDBACK                   ; preset FORM_FEEDBACK                    (15 )
integer*1 BBOX                            ; preset BBOX                             (16 )
integer*1 PICK_MODULE                     ; preset PICK_MODULE                      (17 )
integer*1 KEY2_VALUE                      ; preset KEY2_VALUE                       (18 )
integer*1 KEY2_LABEL                      ; preset KEY2_LABEL                       (19 )
integer*1 FORM_FEEDBACK_LABEL             ; preset FORM_FEEDBACK_LABEL              (20 )
integer*1 ADRC_SCREENS                    ; preset ADRC_SCREENS                     (21 )
integer*1 ADRC_LABEL                      ; preset ADRC_LABEL                       (22 )
integer*1 SUBMIT_NP                       ; preset SUBMIT_NP                        (23 )
integer*1 DOB_HINT                        ; preset DOB_HINT                         (24 )
integer*1 DBA_FEEDBACK                    ; preset DBA_FEEDBACK                     (25 )
integer*1 ID_DOB_MESSAGE                  ; preset ID_DOB_MESSAGE                   (26 )

|{ Prologue
|}

dialog "NACC Main Menu"

|{ Controls
postype 1
line     IDSTATIC                        ,   5, 393,   2, 490
label    SUBJECT_LABEL                   ,  19,       19,  38, "PTID: "
edit     FIND_CASE                       ,  17,       61,  42, 0, 0
label    DOB_LABEL                       ,  19,      139,  38, "DOB: "
edit     FIND_DOB                        ,  17,      181,  69, 0, 0
button   DEFAULT_BUTTON                  , 365,      342,  45, 1, "Def Button"
button   SUBMIT_UDS                      ,   9,      412,  69, 0, "UDS Submission"
list     NACCUDS_SCREENS                 ,  52, 133,  12, 230, 0
label    VISITS_LABEL                    ,  42,      250, 103, "Visit Number"
list     VISITS                          ,  52, 132, 250, 103, 0
image    BANNER                          , 330,  40,  25, 149, 0
label    USERNAME                        , 372,      404,  45, "User Name"
label    MASTER_LABEL                    , 372,      395,   8, "Client Number"
label    HIPAA1                          , 372,       12, 232, "The information contained in this database is confidential."
label    HIPAA2                          , 382,       12, 376, "All use of the database is logged and monitored. Unauthorized or improper use of this system is prohibited."
text     FORM_FEEDBACK                   ,  52, 311, 395,  86, 0
line     BBOX                            ,  14,  21,  12, 394
choice   PICK_MODULE                     ,  38,       12, 126
list     KEY2_VALUE                      , 209, 104, 250, 103, 0
label    KEY2_LABEL                      , 200,      250, 103, "Date"
label    FORM_FEEDBACK_LABEL             ,  42,      395,  89, "Completed (+)"
list     ADRC_SCREENS                    , 197, 128,  12, 230, 0
label    ADRC_LABEL                      , 188,       12, 230, "ADRC Screens"
button   SUBMIT_NP                       ,  26,      412,  69, 0, "NP Submission"
label    DOB_HINT                        , 388,      404,  40, "changes"
label    DBA_FEEDBACK                    , 346,      208, 181, "Changes"
label    ID_DOB_MESSAGE                  ,  18,      265,  40, "OK"
|}

initial
|{ Attribs
|< SUBJECT_LABEL
. SET ITEM FONT SUBJECT_LABEL,1,0,0, 1,""
|>
|< DOB_LABEL
. SET ITEM FONT DOB_LABEL,1,0,0, 1,""
|>
|< FIND_DOB
. SET ITEM FONT FIND_DOB,1,0,0, 0,""
|>
|< DEFAULT_BUTTON
. SET ITEM FONT DEFAULT_BUTTON,1,0,0, 0,""
|>
|< VISITS_LABEL
. SET ITEM FONT VISITS_LABEL,1,0,0, 0,""
|>
|< KEY2_LABEL
. SET ITEM FONT KEY2_LABEL,1,0,0, 0,""
|>
|< FORM_FEEDBACK_LABEL
. SET ITEM FONT FORM_FEEDBACK_LABEL,1,0,0, 0,""
|>
|< ADRC_LABEL
. SET ITEM FONT ADRC_LABEL,1,0,0, 0,""
|>
|< ID_DOB_MESSAGE
. SET ITEM FONT ID_DOB_MESSAGE,1,0,0, 1,"#00C000"
. SET ITEM FONT ID_DOB_MESSAGE,1,0,0, 1,"#00C000"
. SET ITEM FONT ID_DOB_MESSAGE,1,0,0, 1,"#00C000"
|>

|}
|{ Init
. string  * 32  SCREEN_MEMBER
. string  * 32  SCREEN_NAME
. string  * 32  DB_NAME
. string  * 32  CASE$
. string  * 32  KEY1$ KEY2$ KEY3$ KEY4$ KEY5$ KEY6$
. string  * 32  PFONT
. string  * 32  MONTH$ DAY$ YEAR$
. string  * 32  SELECT$
. string  *  1  PACKET$
. string  *  3  VISIT$
. integer *  1  VISIT#
. integer *  1  KEY_COUNT
. integer *  1  YES NO
. integer *  1  FKEY#
. integer *  1  GOT_ONE
. integer *  1  BOLD ITALIC UNDERL SMALL_SIZE
. integer *  1  PROCEED#
. integer *  1  ID_FOUND
. integer *  1  MESSAGE_COUNTER
. integer *  1  PACKET_MODULE
. integer *  4  CASE#
. integer *  4  KEY1# KEY2#
. STRING  *  2  FTLD$
. STRING  * 300 SYSTEM_MESSAGE
. STRING  *  3  FORM_SUFFIX
. date V2_DATE    ('MM/DD/YYYY')
. date V3_DATE    ('MM/DD/YYYY')
. date VISIT_DATE ('MM/DD/YYYY')
. date TEMP_DOB   ('MM/DD/YYYY')
. integer *  2  REMEMBER_SCROLL
. integer *  2  REMEMBER_SELECTED
. INTEGER *  4  ANY_NUM
. string  * 32  TEMP_CASE$
. integer *  4  TEMP_CASE#
. string  * 32  THIS_REC_NAME
. integer *  2  MEM_T MEM_O
. STRING * 100 CHECK_NAME
. value labels PACKET_MODULE ( 1 )'NACC Screens'
                       ( 2 )'Telephone Screens'
                       ( 3 )'FTLD Screens'
. set MEM_T (1) MEM_O (4)
. set GOT_ONE FKEY# ( -1 )
. set NO (0)
. set YES ( 1 )
. SET BOLD ITALIC UNDERL ( 0 )
. set SMALL_SIZE ( 3 )
. set PFONT ( 'Courier' )
. set item font VISITS    , BOLD, ITALIC, UNDERL, SMALL_SIZE, PFONT
. set item font NACCUDS_SCREENS, BOLD, ITALIC, UNDERL, SMALL_SIZE, PFONT
. set item font ADRC_SCREENS, BOLD, ITALIC, UNDERL, SMALL_SIZE, PFONT
. set item font SUBJECT_LABEL, 1, ITALIC, UNDERL, SMALL_SIZE, "#993366"
. set item font DOB_LABEL, 1, ITALIC, UNDERL, SMALL_SIZE, "#993366"
. set item font KEY2_LABEL   , 1, ITALIC, UNDERL, SMALL_SIZE, "#993366"
. set item font HIPAA1  , BOLD, ITALIC, UNDERL, SMALL_SIZE, "#993366"
. set item font HIPAA2  , BOLD, ITALIC, UNDERL, SMALL_SIZE, "#993366"
. set item font FIND_CASE,   BOLD, ITALIC, UNDERL, SMALL_SIZE, PFONT
. set item font FIND_DOB,   BOLD, ITALIC, UNDERL, SMALL_SIZE, PFONT
. ifthen (fileis ('<GDATA1>NACCUDS\Database\Images\Header.bmp' ) eq 1 )
.   set image BANNER, '<GDATA1>NACCUDS\Database\Images\Header.bmp'
. endif
. set item USERNAME, sglobal( 'USERA' )
. set item MASTER_LABEL, SYSTEM( 68 )
. set item ID_DOB_MESSAGE , ''
. hide item DEFAULT_BUTTON
. hide item KEY2_LABEL
. hide item KEY2_VALUE
. for EACH_VALLAB = 1, nvallab( -1, 'PACKET_MODULE' )
.   append item PICK_MODULE, TRIM(VALLABSN (-1, 'PACKET_MODULE', EACH_VALLAB))
. end for
. PACKET_MODULE = 1
. execute subprocedure LOAD_NACCUDS_SCREENS
. execute subprocedure LOAD_ADRC_SCREENS
. select item ADRC_SCREENS, 0
. DB_NAME = 'NACCUDS'
. KEY_COUNT = 2
. V2_DATE = '02/28/2008'
. V3_DATE = '03/15/2015'
. execute subprocedure LOAD_VISITS
. execute subprocedure SET_VISIT
. execute subprocedure LOAD_FORM_FEEDBACK
. set item DOB_HINT, ''
. set item DBA_FEEDBACK, ''
. set MESSAGE_COUNTER ( 0 )
| FOR TESTING POPULATE FIRST CASE
c . process cases count = 1
c .   set item FIND_CASE, PTID
| .   set item DOB_HINT, dateC( DOB, 'MM/DD/YYYY' )
c . END CASES
|}
end initial

message ALL m_id, m_arg1, m_arg2

|{ Message
. MESSAGE_COUNTER = MESSAGE_COUNTER + 1
. ifthen (GETFOCUS( 0) eq FIND_CASE )
.   set item FIND_DOB, ''
.   set item ID_DOB_MESSAGE , ''
.   set item DOB_HINT, ''
.   ID_FOUND = NO
. ENDIF
|}

ifthen (m_id eq DEFAULT_BUTTON )
|< DEFAULT_BUTTON
. PROCEED# = 1
. execute subprocedure SET_TEMP_VALUES
. execute subprocedure VALIDATE_TEMP_CASE
. if( PROCEED# EQ 0 ) NEXT MESSAGE
. execute subprocedure CHECK_FOCUS
. if( PROCEED# EQ 0 ) NEXT MESSAGE
. if( getfocus(0) eq FIND_DOB ) execute subprocedure VALIDATE_TEMP_DOB
. if( PROCEED# EQ 0 ) NEXT MESSAGE
. execute subprocedure LOAD_CASE
|>
next message
endif

ifthen (m_id eq SUBMIT_UDS )
|< SUBMIT_UDS
. execute dbms 'call SUBMIT.UDS'
|>
next message
endif

ifthen (m_id eq NACCUDS_SCREENS )
|< NACCUDS_SCREENS
. select item ADRC_SCREENS, 0
. DB_NAME = 'NACCUDS'
. SCREEN_MEMBER = trim( sbst( gettxt( NACCUDS_SCREENS ), 1, 9 ) )
. execute subprocedure SHOW_KEYS
. if ( m_arg2 eq YES ) display infobox 'Please double click on the appropriate visit #.'
|>
next message
endif

ifthen (m_id eq VISITS )
|< VISITS
. execute subprocedure SET_PACKET
. execute subprocedure LOAD_FORM_FEEDBACK
. execute subprocedure LOAD_ADRC_DATES
. execute subprocedure SET_VISIT
. ifthen ( m_arg2 eq YES and KEY_COUNT LE 2 )
.   PROCEED# = 0
.   ifthen ( PACKET_MODULE eq 1 ) | NACC SCREENS
.     ifthen ( PACKET$ eq '' or PACKET$ eq 'I' or PACKET$ eq 'F' )
.       PROCEED# = 1
.     endif
.   elseif ( PACKET_MODULE eq 2 ) | TELEPHONE SCREENS
.     ifthen (PACKET$ eq '' or PACKET$ eq 'T' )
.       PROCEED# = 1
.     endif
.   elseif (PACKET_MODULE eq 3 ) | FTLD SCREENS
.     ifthen ( PACKET$ eq '' or PACKET$ eq 'I' or PACKET$ eq 'F')
.       PROCEED# = 1
.     endif
.   endif
.   ifthen ( PROCEED# eq 1 )
.     execute subprocedure GOTO_SCREEN_GATEWAY
.     execute subprocedure LOAD_FORM_FEEDBACK
.   else
.     display infobox 'Please selec the correct packet: (' + PACKET$ + ')'
.   endif
. endif
|>
next message
endif

ifthen (m_id eq PICK_MODULE )
|< PICK_MODULE
. execute subprocedure LOAD_NACCUDS_SCREENS
|>
next message
endif

ifthen (m_id eq KEY2_VALUE )
|< KEY2_VALUE
. ifthen ( m_arg2 eq YES)
.   ifthen ( KEY_COUNT eq 3 )
.     execute subprocedure GOTO_SCREEN_GATEWAY
.   else
.     display infobox 'Yo! Wrong amout of keys! Should have ' + format(KEY_COUNT)
.   endif
. endif
|>
next message
endif

ifthen (m_id eq ADRC_SCREENS )
|< ADRC_SCREENS
. select item NACCUDS_SCREENS, 0
. DB_NAME = 'ADRC'
. SCREEN_MEMBER = trim( sbst( gettxt( ADRC_SCREENS ), 1, 9 ) )
. execute subprocedure SHOW_KEYS
. ifthen ( m_arg2 eq YES and KEY_COUNT eq 1 )
.  execute subprocedure GOTO_SCREEN_GATEWAY
. endif
|>
next message
endif

ifthen (m_id eq SUBMIT_NP )
|< SUBMIT_NP
. database is ADRC
. execute dbms 'call SUBMIT.NP'
. end database is
|>
next message
endif

if (m_id eq 0) exit message

end message

message FOCUS m_id
|{ Focus

ifthen (m_id eq FIND_CASE )
|< FIND_CASE
set item FIND_DOB, ''
set item ID_DOB_MESSAGE, ''
ID_FOUND = NO
|>
next message
endif


|}
end message

end dialog
|{ Exit
. execute dbms 'call DCCPROCF.EXIT.MAIN'
|}
|{ Footer
. subprocedure LOAD_NACCUDS_SCREENS
.   remove all NACCUDS_SCREENS
.   SELECT$ = gettxt( PICK_MODULE )
.   ifthen ( SELECT$ = 'NACC Screens' )
.     execute subprocedure LOAD_NACC_SCREENS
.   elseif ( SELECT$ eq 'Telephone Screens' )
.     execute subprocedure LOAD_TELEPHONE_SCREENS
.   elseif ( SELECT$ eq 'FTLD Screens' )
.     execute subprocedure LOAD_FTLD_SCREENS
.   endif
.   select item ADRC_SCREENS, 0
.   SCREEN_MEMBER = trim( sbst( gettxt( NACCUDS_SCREENS ), 1, 9 ) )
. end subprocedure
. subprocedure LOAD_NACC_SCREENS
.   PACKET_MODULE = 1
.   append item NACCUDS_SCREENS, 'Z1CHECK   Form Checklist               '
.   append item NACCUDS_SCREENS, 'A1DEMOG   Subject Demographics         '
.   append item NACCUDS_SCREENS, 'A2INFORM  Informant Demographics       '
.   append item NACCUDS_SCREENS, 'A3FAMHIS  Family History               '
.   append item NACCUDS_SCREENS, 'A4MEDS    Medications                  '
.   append item NACCUDS_SCREENS, 'A5HEALTH  Family Health                '
.   append item NACCUDS_SCREENS, 'B1PHYS    Physical                     '
.   append item NACCUDS_SCREENS, 'B2HACHIN  Hachinski Ischemic Scale     '
.   append item NACCUDS_SCREENS, 'B3UPDRS   UPDRS                        '
.   append item NACCUDS_SCREENS, 'B4CDR     Global Staging-CDR           '
.   append item NACCUDS_SCREENS, 'B5NPI     NPI-Q                        '
.   append item NACCUDS_SCREENS, 'B6GDS     GDS                          '
.   append item NACCUDS_SCREENS, 'B7FAQ     FAQ                          '
.   append item NACCUDS_SCREENS, 'B8OVER    Overall Appraisal            '
.   append item NACCUDS_SCREENS, 'B9ONSET   Symptoms Onset               '
.   append item NACCUDS_SCREENS, 'C1NEURO   Neuropsychological Battery   '
.   append item NACCUDS_SCREENS, 'D1COG     Cognitive Status and Dementia'
.   append item NACCUDS_SCREENS, 'E1IMAGE   Imaging/Labs                 '
. end subprocedure
|
. subprocedure LOAD_TELEPHONE_SCREENS
.   PACKET_MODULE = 2
.   append item NACCUDS_SCREENS, 'Z1TELE    Form Checklist               '
.   append item NACCUDS_SCREENS, 'T1TELE    Inclusion Form               '
.   append item NACCUDS_SCREENS, 'A1DEMOG   Subject Demographics         '
.   append item NACCUDS_SCREENS, 'A2INFORM  Informant Demographics       '
.   append item NACCUDS_SCREENS, 'A3FAMHIS  Family History               '
.   append item NACCUDS_SCREENS, 'A4MEDS    Medications                  '
.   append item NACCUDS_SCREENS, 'A5HEALTH  Family Health                '
.   append item NACCUDS_SCREENS, 'B4CDR     Global Staging-CDR           '
.   append item NACCUDS_SCREENS, 'B5NPI     NPI-Q                        '
.   append item NACCUDS_SCREENS, 'B7FAQ     FAQ                          '
.   append item NACCUDS_SCREENS, 'B9ONSET   Symptoms Onset               '
.   append item NACCUDS_SCREENS, 'D1COG     Cognitive Status and Dementia'
.   append item NACCUDS_SCREENS, 'E1IMAGE   Imaging/Labs                 '
. end subprocedure
|
. subprocedure LOAD_FTLD_SCREENS
.   PACKET_MODULE = 3
.   append item NACCUDS_SCREENS, 'Z1FCHECK  Form Checklist                '
.   append item NACCUDS_SCREENS, 'A3AFCONS  Record of Consent             '
.   append item NACCUDS_SCREENS, 'A3FFAMHIS Family History                '
.   append item NACCUDS_SCREENS, 'B3FUPDRS  Supplemental UPDRS            '
.   append item NACCUDS_SCREENS, 'B9FPPA    Clinical PPA and bvFTD        '
.   append item NACCUDS_SCREENS, 'C1FNEURO  Neuropsych Summary Scores     '
.   append item NACCUDS_SCREENS, 'C2FSOCIAL Social Norms Questionnaire    '
.   append item NACCUDS_SCREENS, 'C3FBEHAV  Social Behavior Checklist     '
.   append item NACCUDS_SCREENS, 'C4FINHIB  Behavioral Inhibition Scale   '
.   append item NACCUDS_SCREENS, 'C5FINTER  Interpersonal Reactivity Index'
.   append item NACCUDS_SCREENS, 'C6FMONIT  Revised Self-monitoring Scale '
.   append item NACCUDS_SCREENS, 'E2FIMAGE  Imaging Available             '
.   append item NACCUDS_SCREENS, 'E3FIMDX   Imaging in Diagnosis          '
. end subprocedure
|
. subprocedure LOAD_ADRC_SCREENS
.   remove all ADRC_SCREENS
.   append item ADRC_SCREENS, 'PTRACK    Primary Tracking Record       '
.   append item ADRC_SCREENS, 'NP        Version 10 NACC Neuropath     '
.   append item ADRC_SCREENS, 'BBIOP     Brain Biopsy                  '
.   append item ADRC_SCREENS, 'BFORM2    Current Social Situation      '
.   append item ADRC_SCREENS, 'BLOOD     Blood and Specimen Collection '
.   append item ADRC_SCREENS, 'BRAIN     Brain Donation Program        '
.   append item ADRC_SCREENS, 'CCD       Clinical Core Diagnosis       '
.   append item ADRC_SCREENS, 'CTMRI     CT/MRI                        '
.   append item ADRC_SCREENS, 'DFORM     Blessed Functional Activity   '
.   append item ADRC_SCREENS, 'FOLSTEIN  Folstein Test                 '
.   append item ADRC_SCREENS, 'LFORM     Tentative Neuro Diagnosis     '
.   append item ADRC_SCREENS, 'NEUROSUM  Neuropsychological Summary    '
.   append item ADRC_SCREENS, 'NEUROPAT  Neuropathology                '
.   append item ADRC_SCREENS, 'PERIMORT  Neuropathology/Perimortem     '
.   append item ADRC_SCREENS, 'PETSPECT  PET/SPECT                     '
.   append item ADRC_SCREENS, 'PROJECTS  Project Enrollment            '
.   append item ADRC_SCREENS, 'VFORM     Modified MMSE Summary         '
.   append item ADRC_SCREENS, 'ZFORM     Death Information             '
. END SUBPROCEDURE
|
. subprocedure LOAD_FORM_FEEDBACK
.  REMEMBER_SCROLL = SCROLLAT( FORM_FEEDBACK )
.  execute subprocedure SET_VISIT
.  execute subprocedure SET_PACKET
.  remove all FORM_FEEDBACK
.  append line FORM_FEEDBACK, '<body bgcolor="#CCAABB" readonly="true">' HTML
.  set item FORM_FEEDBACK_LABEL, 'Completed (visit:  ' + VISIT$ + ')'
.  database is NACCUDS
.    old case is CASE#
.      append line FORM_FEEDBACK, '<font color="#ffffff" face="Arial" size="+1">NACCUDS  Forms</font><br>' HTML
.      ifthen ( PACKET$ eq 'I' or PACKET$ eq 'F' or PACKET$ eq '')
.        do repeat REC$ = $Z1CHECK $
                          $A1DEMOG $
                          $A2INFORM$
                          $A3FAMHIS$
                          $A4MEDS  $
                          $A5HEALTH$
                          $B1PHYS  $
                          $B2HACHIN$
                          $B3UPDRS $
                          $B4CDR   $
                          $B5NPI   $
                          $B6GDS   $
                          $B7FAQ   $
                          $B8OVER  $
                          $B9ONSET $
                          $C1NEURO $
                          $D1COG   $
                          $E1IMAGE $
.          THIS_REC_NAME = 'REC$'
.          GOT_ONE = NO
.          process rec REC$ via ( VISIT# )
.            GOT_ONE = YES
.          end rec
.          execute subprocedure APPEND_FORM_FEEBACK
.        end repeat
.      elseif ( PACKET$ eq 'T' )
.        do repeat REC$ = $Z1TELE  $
                          $T1TELE  $
                          $A1DEMOG $
                          $A2INFORM$
                          $A3FAMHIS$
                          $A4MEDS  $
                          $A5HEALTH$
                          $B4CDR   $
                          $B5NPI   $
                          $B7FAQ   $
                          $B9ONSET $
                          $D1COG   $
                          $E1IMAGE $
.          THIS_REC_NAME = 'REC$'
.          GOT_ONE = NO
.          process rec REC$ via ( VISIT# )
.            GOT_ONE = YES
.          end rec
.          execute subprocedure APPEND_FORM_FEEBACK
.        end repeat
.      elseif ( PACKET$ eq 'IF' )
.        do repeat REC$ = $Z1FCHECK $
                          $A3AFCONS $
                          $A3FFAMHIS$
                          $B3FUPDRS $
                          $B9FPPA   $
                          $C1FNEURO $
                          $C2FSOCIAL$
                          $C3FBEHAV $
                          $C4FINHIB $
                          $C5FINTER $
                          $C6FMONIT $
                          $E2FIMAGE $
                          $E3FIMDX  $
.          THIS_REC_NAME = 'REC$'
.          GOT_ONE = NO
.          process rec REC$ via ( VISIT# )
.            GOT_ONE = YES
.          end rec
.          execute subprocedure APPEND_FORM_FEEBACK
.        end repeat
.      endif
.    end case
.  end database is
|ADRC Plus
.  database is ADRC
.    old case is CASE#
.      append line FORM_FEEDBACK, '<hr><br> <br>' HTML
.      append line FORM_FEEDBACK, '<font color="#ffffff" face="Arial" size="+1">ADRC Forms</font><br>' HTML
.      do repeat REC$ = $PTRACK  $
                    $NP      $
                    $BBIOP   $
                    $BFORM2  $
                    $BLOOD   $
                    $BRAIN   $
                    $CCD     $
                    $CTMRI   $
                    $DFORM   $
                    $FOLSTEIN$
                    $LFORM   $
                    $NEUROSUM$
                    $NEUROPAT$
                    $PERIMORT$
                    $PETSPECT$
                    $PROJECTS$
                    $VFORM   $
                    $ZFORM   $
             REC# = $1               $
                    $5               $
                    $39              $
                    $11 with (VISIT#)$
                    $92              $
                    $14              $
                    $16 with (VISIT#)$
                    $32              $
                    $8  with (VISIT#)$
                    $38 with (VISIT#)$
                    $13 with (VISIT#)$
                    $7  with (VISIT#)$
                    $34              $
                    $18              $
                    $33              $
                    $50              $
                    $75 with (VISIT#)$
                    $12              $
.        THIS_REC_NAME = 'REC$'
.        GOT_ONE = NO
.        process rec REC#
.          GOT_ONE = YES
.        end rec
.        execute subprocedure APPEND_FORM_FEEBACK
.      end repeat
.    end case
.  end database is
. ANY_NUM = scrollto( FORM_FEEDBACK, REMEMBER_SCROLL)
. end subprocedure LOAD_FORM_FEEDBACK
|
|
. subprocedure APPEND_FORM_FEEBACK
.   ifthen ( GOT_ONE eq YES )
.     append line FORM_FEEDBACK, '<font color="#000055" face="Courier New">+ ' + THIS_REC_NAME  + '</font><br>' HTML
.   else
.     append line FORM_FEEDBACK, '<font color="#666666" face="Courier New"> ' + THIS_REC_NAME  + '</font><br>' HTML
.   endif
. end subprocedure
|
. subprocedure LOAD_CASE
.   execute subprocedure SET_TEMP_VALUES
.   execute subprocedure VALIDATE_TEMP_DOB
.   if (PROCEED# = NO) exit subprocedure
.   ID_FOUND = NO
.   database is NACCUDS
.     old case is TEMP_CASE#
.       CASE# = PTID
.       CASE$ = format( CASE# )
.       ifthen ( cdate( gettxt( FIND_DOB ) , 'MM/DD/YYYY' ) eq cdate( DOB, 'MM/DD/YYYY' ) )
.         ID_FOUND = YES
.         set item DOB_HINT, 'DOB is correct'
.       else
.         ID_FOUND = NO
.         display infobox 'Incorrect DOB for ID: ' + TEMP_CASE$
.         set item DOB_HINT, datec( DOB, 'mm/dd/yyyy')
.         exit subprocedure
.       endif
.     end case
.   end database is
.   ifthen ( ID_FOUND eq YES )
.     focus item NACCUDS_SCREENS
.     execute subprocedure LOAD_VISITS
.     execute subprocedure SET_VISIT
.     execute subprocedure SET_PACKET
.     execute subprocedure LOAD_NACCUDS_SCREENS
.     execute subprocedure LOAD_FORM_FEEDBACK
.   elseif ( ID_FOUND eq NO )
.     display okcanbox 'Do you want to create a new ID: ' + TEMP_CASE$ + '?' response PROCEED#
.     if ( PROCEED# eq NO ) EXIT SUBPROCEDURE
.     CASE$ = TEMP_CASE$
.     CASE# = TEMP_CASE#
.     database is ADRC
.       new case is CASE#
.         DOB = cdate( gettxt( FIND_DOB ) , 'MM/DD/YYYY' )
.       end case is
.       execute subroutine ADRC.SCREENS.PTRACK ( CASE$ KEY1$ KEY2$ KEY3$ KEY4$ KEY5$ KEY6$ )
.     end database is
.     database is NACCUDS
.       new case is CASE#
.         ID_FOUND = YES
.         DOB = cdate( gettxt( FIND_DOB ) , 'MM/DD/YYYY' )
.       end case
.     end database is
.   endif
.   ifthen ( ID_FOUND eq NO )
.     set item DOB_HINT, 'ID NOT FOUND'
.     set item ID_DOB_MESSAGE , ''
.   ELSE
.     set item ID_DOB_MESSAGE , 'OK'
.   endif
. end subprocedure LOAD_CASE
|
. subprocedure SHOW_KEYS
.  ifthen ( SCREEN_MEMBER eq 'PTRACK'   or
            SCREEN_MEMBER eq 'NP'       or
            SCREEN_MEMBER eq 'NEUROPAT' or
            SCREEN_MEMBER eq 'PERIMORT' or
            SCREEN_MEMBER eq 'PROJECTS' or
            SCREEN_MEMBER eq 'ZFORM' )
.    hide item VISITS_LABEL
.    hide item VISITS
.    hide item KEY2_LABEL
.    hide item KEY2_VALUE
.    KEY_COUNT = 1
.  elseif ( SCREEN_MEMBER eq 'Z1CHECK'   or
           SCREEN_MEMBER eq 'A1DEMOG'   or
           SCREEN_MEMBER eq 'A2INFORM'  or
           SCREEN_MEMBER eq 'A3FAMHIS'  or
           SCREEN_MEMBER eq 'A4MEDS'    or
           SCREEN_MEMBER eq 'A5HEALTH'  or
           SCREEN_MEMBER eq 'B1PHYS'    or
           SCREEN_MEMBER eq 'B2HACHIN'  or
           SCREEN_MEMBER eq 'B3UPDRS'   or
           SCREEN_MEMBER eq 'B4CDR'     or
           SCREEN_MEMBER eq 'B5NPI'     or
           SCREEN_MEMBER eq 'B6GDS'     or
           SCREEN_MEMBER eq 'B7FAQ'     or
           SCREEN_MEMBER eq 'B8OVER'    or
           SCREEN_MEMBER eq 'B9ONSET'   or
           SCREEN_MEMBER eq 'C1NEURO'   or
           SCREEN_MEMBER eq 'D1COG'     or
           SCREEN_MEMBER eq 'E1IMAGE'   or
           SCREEN_MEMBER eq 'Z1TELE'    or
           SCREEN_MEMBER eq 'T1TELE'    or
           SCREEN_MEMBER eq 'Z1FCHECK'  or
           SCREEN_MEMBER eq 'A3AFCONS'  or
           SCREEN_MEMBER eq 'A3FFAMHIS' or
           SCREEN_MEMBER eq 'B3FUPDRS'  or
           SCREEN_MEMBER eq 'B9FPPA'    or
           SCREEN_MEMBER eq 'C1FNEURO'  or
           SCREEN_MEMBER eq 'C2FSOCIAL' or
           SCREEN_MEMBER eq 'C3FBEHAV'  or
           SCREEN_MEMBER eq 'C4FINHIB'  or
           SCREEN_MEMBER eq 'C5FINTER'  or
           SCREEN_MEMBER eq 'C6FMONIT'  or
           SCREEN_MEMBER eq 'E2FIMAGE'  or
           SCREEN_MEMBER eq 'E3FIMDX'   or
           SCREEN_MEMBER eq 'BFORM2'    or
           SCREEN_MEMBER eq 'CCD'       or
           SCREEN_MEMBER eq 'DFORM'     or
           SCREEN_MEMBER eq 'FOLSTEIN'  or
           SCREEN_MEMBER eq 'LFORM'     or
           SCREEN_MEMBER eq 'NEUROSUM'  or
           SCREEN_MEMBER eq 'VFORM' )
.    hide item KEY2_LABEL
.    hide item KEY2_VALUE
.    show item VISITS_LABEL
.    show item VISITS
.    KEY_COUNT = 2
.  elseif ( SCREEN_MEMBER  eq 'BBIOP'    or
           SCREEN_MEMBER   eq 'BLOOD'    or
           SCREEN_MEMBER   eq 'BRAIN'    or
           SCREEN_MEMBER   eq 'CONTACT'  or
           SCREEN_MEMBER   eq 'CTMRI'    or
           SCREEN_MEMBER   eq 'PETSPECT' )
.    hide item VISITS_LABEL
.    hide item VISITS
.    show item KEY2_LABEL
.    show item KEY2_VALUE
.    KEY_COUNT = 3
.    set item KEY2_LABEL 'Form Date'
.    execute subprocedure LOAD_ADRC_DATES
.  else
.    display infobox 'unknonw screen member and key_count will be unknown'
.  endif
. end subprocedure SHOW_KEYS
|
. subprocedure LOAD_VISITS
.   show item VISITS_LABEL
.   show item VISITS
.   hide item KEY2_LABEL
.   hide item KEY2_VALUE
.   REMEMBER_SCROLL = SCROLLAT( VISITS )
.   REMEMBER_SELECTED = GETPOS (VISITS )
.   remove all VISITS
.   for VISIT# = 0, 25
.     old case is CASE#
.       FTLD$ = ''
.       process rec Z1CHECK via ( VISIT# )
.         get vars PACKET VISITDATE
.         FKEY# = VISIT#
.         PACKET$ = PACKET
.       end rec
.       process rec Z1TELE via ( VISIT# )
.         get vars VISITDATE
.         PACKET$ = 'T'
.         FKEY# = VISIT#
.       end rec
.       process rec Z1FCHECK via ( VISIT# )
.         get vars VISITDATE
.         FTLD$ = 'ZF'
.         FKEY# = VISIT#
.       end rec
.     end case
.     ifthen ( VISIT# eq FKEY# )
.       FKEY# = -1
.       append item VISITS, pad( format( VISIT# ), ' ', 3, 3 ) + datec( VISITDATE, 'MM/DD/YYYY' ) + ' ' + PACKET$ + ' ' + FTLD$
.       select item VISITS, getnitem( VISITS )
.     else
.       append item VISITS, pad( format( VISIT# ), ' ', 3, 3 ) + '    '
.     endif
.   end for
.   ANY_NUM = scrollto( FORM_FEEDBACK, REMEMBER_SCROLL)
.   SELECT ITEM VISITS( REMEMBER_SELECTED )
. end subprocedure LOAD_VISITS
|
. subprocedure LOAD_ADRC_DATES
.  remove all KEY2_VALUE
.  append item KEY2_VALUE, 'New ' + SCREEN_MEMBER
.  ifNOTTHEN ( SCREEN_MEMBER eq 'BBIOP' OR
               'BLOOD' OR
               'BRAIN' OR
               'CONTACT' OR
               'CTMRI' OR
               'PETSPECT' )
.    EXIT SUBPROCEDURE
.  endif
.  database is ADRC
.    case is CASE#
.      ifthen ( SCREEN_MEMBER eq 'BBIOP' )
.         process rec BBIOP
.          append item KEY2_VALUE, datec( BDATE, 'MM/DD/YYYY' )
.        end rec
.      elseif ( SCREEN_MEMBER eq 'BLOOD' )
.        process rec BLOOD
.          append item KEY2_VALUE, datec( BL_FORM, 'MM/DD/YYYY' )
.        end rec
.      elseif ( SCREEN_MEMBER eq 'BRAIN' )
.        process rec BRAIN
.          append item KEY2_VALUE, datec( DATE14, 'MM/DD/YYYY' )
.        end rec
.      elseif ( SCREEN_MEMBER eq 'CONTACT' )
.        process rec CONTACT
.          append item KEY2_VALUE, datec( CONTDT, 'MM/DD/YYYY' )
.        end rec
.      elseif ( SCREEN_MEMBER eq 'CTMRI' )
.        process rec CTMRI
.          append item KEY2_VALUE, datec( CM1, 'MM/DD/YYYY' )
.        end rec
.      elseif ( SCREEN_MEMBER eq 'PETSPECT' )
.         process rec PETSPECT
.           append item KEY2_VALUE, datec( PS1, 'MM/DD/YYYY' )
.         end rec
.      endif
.    end case
.  end database is
. end subprocedure LOAD_ADRC_DATES
|
. subprocedure GOTO_SCREEN_GATEWAY
.   PROCEED# = 1
.   execute subprocedure VALIDATE_TEMP_CASE
.   ifthen (PROCEED# EQ 0)
.     display infobox 'Sorry somehow I lost the value of the CASEID'
.     EXIT SUBPROCEDURE
.   endif
.   KEY1$ = trim( sbst( getitxt( VISITS, getpos( VISITS ) ), 1, 2 ) )
.   VISIT_DATE = cdate( trim( sbst( getitxt( VISITS, getpos( VISITS ) ), 4, 10 ) ), 'MM/DD/YYYY' )
.   IFTHEN (DB_NAME EQ 'NACCUEDS' ) | DO CHECK THIS FOR ADRC FORMS
.     IFTHEN ( EXISTS( VISIT_DATE ) EQ 0 )
.       IFNOTTHEN ( SCREEN_MEMBER = 'Z1CHECK' or 'Z1TELE')
.         SYSTEM_MESSAGE =  'The form Z1CHECK, the variable Visit Date, must be filled in.'
                       + char(13) +  char(13) + 'INTERVAL: ' + KEY1$
.         DISPLAY INFOBOX SYSTEM_MESSAGE
.         EXIT SUBPROCEDURE
.       ENDIF
.     ENDIF
.   ENDIF
.   KEY2$ = trim( sbst( getitxt( KEY2_VALUE, getpos( KEY2_VALUE ) ), 1, 10 ) )
.   SCREEN_NAME = SCREEN_MEMBER  | sets the default value.
.   ifthen ( DB_NAME = 'NACCUDS' )
.     database is NACCUDS
.       execute subprocedure GOTO_SCREEN_NACCUDS
.     end database is
.  elseif ( DB_NAME = 'ADRC' )
.    database is ADRC
.      execute subprocedure GOTO_SCREEN_ADRC
.    end database is
.  else
.    display infobox 'No database is specified.   Whoops!'
.  endif
.  set KEY2$ ( missing )
. end subprocedure GOTO_SCREEN_GATEWAY
|
. subprocedure GOTO_SCREEN_NACCUDS
C   WHICH SUFFIX SHOULD BE USED FOR THE PQL FORMS NAME
C   FORMS WILL TRY FALLING BACK.  LATEST APPROPRIATE VERSION FIRST THEN OLDER VERSIONS
C   TRANSFORM SCREEN_MEMBER IF NEEDED TO NEW NAME
.   ifthen ( SCREEN_MEMBER EQ 'A1DEMOG' or SCREEN_MEMBER EQ 'A2INFORM' )
.     ifthen ( exists( PACKET$ ) EQ 0 )
.       display infobox "Packet Type is missing"
.       EXIT SUBPROCEDURE
.     endif
.     if ( PACKET$ EQ 'T' ) PACKET$ = 'F'
.     SCREEN_MEMBER = SCREEN_MEMBER + '_' + PACKET$
.   elseif ( SCREEN_MEMBER = 'A3FAMHIS' )
.     if ( PACKET$ = 'T' ) PACKET$ = 'F'
.     SCREEN_MEMBER = SCREEN_MEMBER + '_' + PACKET$
.   elseif ( SCREEN_MEMBER = 'A4MEDS' )
.     ifthen ( ( VISIT_DATE >= V2_DATE ) AND ( VISIT_DATE <V3_DATE ) )
.       SCREEN_MEMBER = 'A4G'
.     endif
.   endif
C   FIND THE RELEVANT VERSION OF THE PQL FORM
.   IFTHEN (VISIT_DATE < V2_DATE )
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + ':T', 1 ) eq 1) FORM_SUFFIX = ''
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + '_V1' + ':T', 1 ) eq 1) FORM_SUFFIX = '_V1'
.   ELSEIF (VISIT_DATE < V3_DATE )
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + ':T', 1 ) eq 1) FORM_SUFFIX = ''
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + '_V1' + ':T', 1 ) eq 1) FORM_SUFFIX = '_V1'
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + '_V2' + ':T', 1 ) eq 1) FORM_SUFFIX = '_V2'
.   ELSE | latest Version: at time of writing V3
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + ':T', 1 ) eq 1) FORM_SUFFIX = ''
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + '_V1' + ':T', 1 ) eq 1) FORM_SUFFIX = '_V1'
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + '_V2' + ':T', 1 ) eq 1) FORM_SUFFIX = '_V2'
.     if (meminfo (DB_NAME + '.SCREENS.' + SCREEN_MEMBER + '_V3' + ':T', 1 ) eq 1) FORM_SUFFIX = '_V3'
.   ENDIF
.   CHECK_NAME = DB_NAME + '.SCREENS.' + SCREEN_MEMBER + FORM_SUFFIX + ':T'
.   write [meminfo( CHECK_NAME, 1)] CHECK_NAME '| ' DB_NAME  '.SCREENS.'  SCREEN_MEMBER  FORM_SUFFIX  ':T'
.   SCREEN_NAME = DB_NAME + '.SCREENS.' + SCREEN_MEMBER + FORM_SUFFIX
C   CHECK TO SEE IF SCREEN EXISTS AND IF IT IS CORRECTLY COMPILED
.   ifNOTthen (meminfo(SCREEN_NAME + ':O', 1) = MEM_O)
.     display infobox 'Contact Help Support cannot find ' + SCREEN_NAME
.     exit subprocedure
.   endif
.   ifNOTthen (meminfo(SCREEN_NAME+ ':O', 8) EQ 0)  | correctly compiled
.     display infobox 'Contact Help Support COMPILE ' + SCREEN_MEMBER
.     exit subprocedure
.   endif
.   execute subroutine [SCREEN_NAME] ( CASE$ KEY1$ KEY2$ KEY3$ KEY4$ KEY5$   KEY6$ )
.   ifthen ( SCREEN_MEMBER = 'Z1CHECK' or SCREEN_MEMBER = 'Z1TELE' )
.     execute subprocedure LOAD_VISITS
.     execute subprocedure SET_VISIT
.   endif
. end subprocedure
|
subprocedure GOTO_SCREEN_ADRC
. IFTHEN (0 EQ EXISTS(SCREEN_MEMBER ) OR LEN(SCREEN_MEMBER) )
.   DISPLAY INFOBOX 'WHAT FORM ARE WE TALKING ABOUT?'
.     PROCEED# = 0
. ENDIF
. ifthen ( sbst( KEY2$, 1, 3 ) = 'New' and KEY_COUNT = 3 )
.   display textbox 'Please enter a new ' + SCREEN_MEMBER + ' form date' response PROCEED#, KEY2$ |
.   if (PROCEED# EQ -1) PROCEED# = 0; EXIT SUBPROCEDURE
.   KEY2$ = trim( KEY2$ )
.   KEY2$ = replace( KEY2$, ' ', '/', 10, 0, 0 )
.   ifNOTthen ( cdate( KEY2$, 'MM/DD/YYYY' ) > cdate( '01/01/1950', 'MM/DD/YYYY' )
         and cdate( KEY2$, 'MM/DD/YYYY' ) < today( 0 ) )
.     PROCEED# = 0
.     display infobox 'Bad Date! ' + KEY2$
.     exit subprocedure
.   endif
. endif
. SCREEN_NAME = DB_NAME + '.SCREENS.' + SCREEN_MEMBER
C CHECK TO SEE IF SCREEN EXISTS AND IF IT IS CORRECTLY COMPILED
. ifNOTthen (meminfo(SCREEN_NAME + ':O', 1) = MEM_O)
.   display infobox 'Contact Help Support cannot find ' + SCREEN_NAME
.   exit subprocedure
. endif
. ifNOTthen (meminfo(SCREEN_NAME+ ':O', 8) EQ 0)  | correctly compiled
.   display infobox 'Contact Help Support COMPILE ' + SCREEN_MEMBER
.   exit subprocedure
. endif
. execute subroutine [SCREEN_NAME] ( CASE$ KEY1$ KEY2$ KEY3$ KEY4$ KEY5$ KEY6$ )
end subprocedure
|
. subprocedure CHECK_FOCUS
.   ifthen (GETFOCUS( 0) eq FIND_CASE )
.     set item ID_DOB_MESSAGE , ''
.     focus item FIND_DOB
.     PROCEED# = 0
.   endif
. end subprocedure
|
subprocedure VALIDATE_TEMP_CASE
. if (exists( TEMP_CASE# ) = NO )  PROCEED# = NO
. ifNOT ( TEMP_CASE# > 0 and TEMP_CASE# < 20000 ) PROCEED# = NO
. ifthen (PROCEED# = NO)
.   ifthen( EXISTS ( TEMP_CASE$ ) EQ 0 )
.     SYSTEM_MESSAGE = 'No PTID has not been set'
.   else
.     SYSTEM_MESSAGE = TEMP_CASE$ + ' is not a valid PTID.'
.   endif
.   set item ID_DOB_MESSAGE , ''
.   display infobox SYSTEM_MESSAGE
.   focus item FIND_CASE
.   set item DOB_HINT, ''
. endif
end subprocedure
|
subprocedure VALIDATE_TEMP_DOB
. ifthen ( exists( cdate( temp_dob, 'MM/DD/YYYY' ) ) eq NO )
.   display infobox 'Sorry, The birthday is not in the correct format.'
.   focus item FIND_DOB
.   PROCEED# = NO
. endif
. ifthen (PROCEED# EQ NO )
.   SET ITEM ID_DOB_MESSAGE , ''
.   exit subprocedure
. endif
end subprocedure
|
subprocedure SET_TEMP_VALUES
.  TEMP_CASE$ = trim( gettxt( FIND_CASE ) )
.  TEMP_CASE# = numbr( TEMP_CASE$ )
.  TEMP_DOB =  gettxt( FIND_DOB )
end subprocedure
|
subprocedure SET_PACKET
. PACKET$ = trim( sbst( getitxt( VISITS, getpos( VISITS ) ), 15, 2 ) )
. if ( exists( PACKET$ ) = NO ) PACKET$ = ''
CIF EQ 1,2
. ifthen ( PACKET$ eq '' or PACKET$ eq 'I' or PACKET$ eq 'F' )
.   select item PICK_MODULE, 1
. elseif ( PACKET$ eq 'T' )
.   select item PICK_MODULE, 2
. else
.   write 'some sort of unknown packet: ' PACKET$
. endif
CIF END
end subprocedure
|
subprocedure SET_VISIT
C write /// 'SET visit' MESSAGE_COUNTER
. VISIT$ = trim( sbst( getitxt( VISITS, getpos( VISITS ) ), 1, 2 ) )
. set item VISITS_LABEL, 'Visit: ' + VISIT$
. VISIT# = numbr( VISIT$ )
end subprocedure
end retrieval
|
disconnect database ADRC   |Disconnects at end,  Connects before retrieval,  in previous program
|}
END PROCEDURE
